#Log4j根据日志信息的重要程度，分OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#Log4j官方建议实际实用的话，Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG

#输出LOGO以上级别
log4j.rootLogger=INFO,Console,File
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c] - %m%n

#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File=org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File=logs/ssm.log
#定义文件最大大小
log4j.appender.File.MaxFileSize=10MB
# 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold=ALL
log4j.appender.File.layout=org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern=[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c] - %m%n

# %d 输出日志时间点的日期（一般是那一天），也可以在其后用大括号自定义格式，比如：%d{yyyy MMM dd HH:mm:ss：SSS}，输出类似：2014 11 05 ：23：28 ：22
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL ;
# %r 输出自应用启动到输出该log信息耗费的毫秒数 ;
# %c 输出所属的全类名，也可以只输出类名，：%c{1} ;
# %t 输出产生该日志的当前线程名字 ;
# %m 输出代码中自定义的的信息;
# %n 输出一个回车换行符，Windows平台为“rn”,Unix平台为“n”;
# %l 输出日志发生的代码行位置，在代码中的行数;
# 每一个百分号后的字母就是具体单词的首字符；比如：c->class  t->thread等等;