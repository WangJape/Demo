<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
-->

<mapper namespace="dao.UserMapper">

    <sql id="column">
        id, name, sex, qq, birthday
    </sql>

    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getById，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="entity.User"就表示将查询结果封装成一个User类的对象返回 User类就是t_user1表所对应的实体类
    -->
    <!--根据id查询得到一个user对象-->
    <select id="getById" parameterType="int" resultType="entity.User">
        select <include refid="column"></include>
        from t_user1
        where id = #{id}
    </select>

    <insert id="insertOne" parameterType="entity.User" useGeneratedKeys="true" keyProperty="id">
        insert into t_user1 (<include refid="column"></include>)
        values (null,#{name},#{sex},#{qq},#{birthday})
    </insert>

    <insert id="batchInsert" parameterType="java.util.List">
        insert into t_user1 (<include refid="column"></include>)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (null,#{item.name},#{item.sex},#{item.qq},#{item.birthday})
        </foreach>
    </insert>

</mapper>